name: iOS → TestFlight

on:
  workflow_dispatch:   # 수동 실행
  push:
    tags: ['ios-v*']   # ios-v1.0.0 형태의 태그 push 시 실행

jobs:
  build-and-upload:
    runs-on: macos-latest   # GitHub macOS 빌드 머신 사용

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Flutter SDK 설치
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'

      # 3. 패키지 의존성 다운로드
      - name: Flutter pub get
        run: flutter pub get

      # 4. .env 파일 생성 (Secrets에서 불러옴)
      - name: Create .env from secret
        run: |
          rm -f .env
          cat > .env << 'EOF'
          ${{ secrets.APP_ENV_FILE }}
          EOF

      # 5. Xcode 버전 고정 (16.0)
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'
      
      # 6. 배포 인증서(p12) 설치
      - name: Import code signing certs
        uses: apple-actions/import-codesign-certs@v5
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

      # 7. App Store Connect에서 프로비저닝 프로파일 다운로드
      - name: Download provisioning profiles
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ vars.BUNDLE_ID }}
          profile-type: IOS_APP_STORE
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      # 8. CocoaPods 설치/업데이트 (필요시)
      - name: Pod install (if needed)
        run: |
          cd ios
          pod install --repo-update || true
          cd ..

      # 9. 설치된 인증서/키체인 확인 (디버깅용)
      - name: Keychains / Identities (debug)
        run: |
          security list-keychains
          security find-identity -p codesigning -v || true

      # 10. 다운로드된 프로비저닝 프로파일 확인 (디버깅용)
      - name: Provisioning profiles (debug)
        run: |
          ls -al ~/Library/MobileDevice/Provisioning\ Profiles || true

      # 11. Xcode 빌드 세팅 확인 (서명 정보 디버깅)
      - name: Effective signing settings (debug)
        run: |
          xcodebuild -showBuildSettings \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' | \
            /usr/bin/grep -E "DEVELOPMENT_TEAM|CODE_SIGN|PRODUCT_BUNDLE_IDENTIFIER|PROVISIONING_PROFILE_SPECIFIER|CODE_SIGN_IDENTITY" || true

      # 12. IPA 빌드 (Release, exportOptions.plist 사용)
      - name: Build IPA
        run: flutter build ipa --release --export-options-plist=ios/exportOptions.plist --build-number $GITHUB_RUN_NUMBER

      # 13. 빌드 결과물에서 .ipa 파일 경로 찾기
      - name: Locate IPA
        id: locate_ipa
        run: |
          set -e
          ls -al build/ios/ipa || true
          IPA_PATH=$(ls -1 build/ios/ipa/*.ipa | head -n 1)
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA found under build/ios/ipa"
            exit 1
          fi
          echo "ipa_path=$IPA_PATH" >> $GITHUB_OUTPUT
          echo "Found IPA: $IPA_PATH"

      # 14. 빌드된 IPA 파일을 GitHub Actions artifact로 업로드 (디버깅/백업용)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ${{ steps.locate_ipa.outputs.ipa_path }}
      
      # 15. TestFlight에 IPA 업로드
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          app-path: ${{ steps.locate_ipa.outputs.ipa_path }}
          issuer-id: ${{ vars.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ vars.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
